knitr::opts_chunk$set(fig.width=14, fig.height=5, echo=TRUE, warning=FALSE,
message=FALSE, eval=TRUE)##, cache=TRUE)
library(tidyverse)
library(flowmix)
outputdir = "."
set.seed(0)
datobj = generate_data_generic(p=5, TT=300, fac=.5, nt=2000, dimdat = 3)
ylist = datobj$ylist
X = datobj$X
plot(ylist[[1]][,1:2], ylab="", xlab="", pch=16, col=rgb(0,0,1,0.2), cex=.5)
matplot(X, type = 'l')
numclust = 4
set.seed(0)
res = flowmix(ylist = ylist, X = X, numclust = numclust,
niter = 300, mean_lambda = 0.01, prob_lambda = 0.001,
nrep = 1)
print(res)
res
res$alpha
plot_prob(res)
par(mfrow = c(1,3), cex = 1.2)
for(idim in 1:3){
res$mn[,idim,] %>% matplot(type = 'l',
lty = 1, ylab = paste0("Mean, dim=", idim))
}
par(mfrow = c(1,3))
ylim = c(-3,8)
xlim = c(-5,8)
for(dims in list(c(1,2), c(2,3), c(3,1))){
scatterplot_2d(ylist, res, 100, dims = dims, cex_fac=1, ylim=ylim, xlim=xlim)
}
par(mfrow = c(1,3))
for(tt in c(1,50,200)){
scatterplot_2d(ylist, res, tt,
dims = c(1,2),
cex_fac = 1,
ylim = ylim,
xlim = xlim)
title(main = paste0("t=", tt, " out of ", res$TT))
}
par(mfrow = c(1,3), oma = c(2,2,2,2))
ylim = c(-3,8)
xlim = c(-5,8)
for(tt in 1:res$TT){
for(dims in list(c(1,2), c(2,3), c(3,1))){
scatterplot_2d(ylist, res, 100, dims = dims, cex_fac=1, ylim=ylim, xlim=xlim)
}
mtext(outer = TRUE,
text = paste0("t=", tt, " out of ", res$TT),
cex = 2)
}
maxres = get_max_lambda(destin,
"maxres.Rdata",
ylist = ylist,
countslist = NULL,
X = X,
numclust = 4,
maxdev = 0.5,
max_mean_lambda = 40,
max_prob_lambda = 2)
args(get_max_lambda)
?get_max_lambda
maxres = get_max_lambda(destin = 'C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flow_CV_out/',
"maxres.Rdata",
ylist = ylist,
countslist = NULL,
X = X,
numclust = 4,
maxdev = 0.5,
max_mean_lambda = 40,
max_prob_lambda = 2)
## Define the locations to save the CV.
destin = 'C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flow_CV_out/'
## Define the CV folds (as every fifth, nfold-sized, block of indices)
folds = make_cv_folds(ylist, nfold = 5, verbose = FALSE, blocksize = 20)
## Define the candidate lambda values (logarithmically spaced)
cv_gridsize = 5
## maxres = list(alpha = 1, beta=1)
prob_lambdas =  logspace(min = 0.0001, max = maxres$alpha, length = cv_gridsize)
mean_lambdas = logspace(min = 0.0001, max = maxres$beta, length = cv_gridsize)
## Example of one CV job for one pair of regularization parameters (and CV folds
## and EM replicates)
ialpha = 1
ibeta = 1
ifold = 1
irep = 1
destin = "~/Desktop"## Change to your target destination.
one_job(ialpha = ialpha,
ibeta = ibeta,
ifold = ifold,
irep = irep,
folds = folds,
destin = destin,
mean_lambda = mean_lambdas, prob_lambdas = prob_lambdas,
## The rest that is needed explicitly for flowmix()
ylist = ylist,
countslist = NULL,
X = X,
numclust = 4,
maxdev = 0.5,
## verbose = TRUE
)
## Example of one CV job for one pair of regularization parameters (and CV folds
## and EM replicates)
ialpha = 1
ibeta = 1
ifold = 1
irep = 1
destin = "~/Desktop"## Change to your target destination.
one_job(ialpha = ialpha,
ibeta = ibeta,
ifold = ifold,
irep = irep,
folds = folds,
destin = destin,
mean_lambda = mean_lambdas, prob_lambdas = prob_lambdas,
## The rest that is needed explicitly for flowmix()
ylist = ylist,
countslist = NULL,
X = X,
numclust = 4,
maxdev = 0.5
## verbose = TRUE
)
## Example of one CV job for one pair of regularization parameters (and CV folds
## and EM replicates)
ialpha = 1
ibeta = 1
ifold = 1
irep = 1
destin = 'C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flow_CV_out/'## Change to your target destination.
one_job(ialpha = ialpha,
ibeta = ibeta,
ifold = ifold,
irep = irep,
folds = folds,
destin = destin,
mean_lambda = mean_lambdas, prob_lambdas = prob_lambdas,
## The rest that is needed explicitly for flowmix()
ylist = ylist,
countslist = NULL,
X = X,
numclust = 4,
maxdev = 0.5
## verbose = TRUE
)
## Example of one replicate of model estimation (in the full data) for one pair
## of regularization parameters.
ialpha = 1
ibeta = 1
irep = 1
destin = 'C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flow_CV_out/'## Change to your target destination.
one_job_refit(ialpha = ialpha,
ibeta = ibeta,
irep = irep,
destin = destin,
mean_lambda = mean_lambdas, prob_lambdas = prob_lambdas,
## The rest that is needed explicitly for flowmix()
ylist = ylist,
countslist = NULL,
X = X,
numclust = 4,
maxdev = 0.5
## verbose = TRUE
)
## Example of one replicate of model estimation (in the full data) for one pair
## of regularization parameters.
ialpha = 1
ibeta = 1
irep = 1
destin = 'C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flow_CV_out/'## Change to your target destination.
one_job_refit(ialpha = ialpha,
ibeta = ibeta,
irep = irep,
destin = destin,
mean_lambda = mean_lambdas, prob_lambdas = prob_lambdas,
## The rest that is needed explicitly for flowmix()
ylist = ylist,
#countslist = NULL,
X = X,
numclust = 4,
maxdev = 0.5
## verbose = TRUE
)
args(one_job_refit)
?one_job_refit
View(one_job_refit)
## Example of one replicate of model estimation (in the full data) for one pair
## of regularization parameters.
ialpha = 1
ibeta = 1
irep = 1
destin = 'C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flow_CV_out/'## Change to your target destination.
one_job_refit(ialpha = ialpha,
ibeta = ibeta,
irep = irep,
nrep = 1,
destin = destin,
mean_lambda = mean_lambdas, prob_lambdas = prob_lambdas,
## The rest that is needed explicitly for flowmix()
ylist = ylist,
countslist = NULL,
X = X,
numclust = 4,
maxdev = 0.5
## verbose = TRUE
)
## Example of one replicate of model estimation (in the full data) for one pair
## of regularization parameters.
ialpha = 1
ibeta = 1
irep = 1
destin = 'C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flow_CV_out/'## Change to your target destination.
one_job_refit(ialpha = ialpha,
ibeta = ibeta,
#irep = irep,
nrep = 1,
destin = destin,
mean_lambda = mean_lambdas, prob_lambdas = prob_lambdas,
## The rest that is needed explicitly for flowmix()
ylist = ylist,
countslist = NULL,
X = X,
numclust = 4,
maxdev = 0.5
## verbose = TRUE
)
cvres = cv.flowmix(ylist = ylist,
countslist = NULL,
X = X,
maxdev = 0.5,
numclust = 4,
prob_lambdas = prob_lambdas,
mean_lambdas = mean_lambdas,
## nrep = 5,
## nfold = 5,
nrep = 1,
nfold = 2,
## verbose = TRUE,
destin = 'C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flow_CV_out/',
mc.cores = 8)
?cv.flowmix
cvres = cv.flowmix(ylist = ylist,
countslist = NULL,
X = X,
maxdev = 0.5,
numclust = 4,
prob_lambdas = prob_lambdas,
mean_lambdas = mean_lambdas,
## nrep = 5,
## nfold = 5,
nrep = 1,
nfold = 2,
## verbose = TRUE,
destin = 'C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flow_CV_out/',
mc.cores = 8)
library(flowmix)
cvres = cv.flowmix(ylist = ylist,
countslist = NULL,
X = X,
maxdev = 0.5,
numclust = 4,
prob_lambdas = prob_lambdas,
mean_lambdas = mean_lambdas,
## nrep = 5,
## nfold = 5,
nrep = 1,
nfold = 2,
## verbose = TRUE,
destin = 'C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flow_CV_out/',
mc.cores = 8)
cv.flowmix()
