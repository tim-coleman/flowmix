prob <- CVXR::Problem(CVXR::Maximize(obj))
result <- solve(prob, solver = "ECOS", FEASTOL = thresh,
RELTOL = thresh, ABSTOL = thresh)
alphamat = result$getValue(alphamat)
alphamat[which(abs(alphamat) < 1e-08)] = 0
return(alphamat)
}
numclust = 4
set.seed(0)
res = flowmix(ylist = ylist, X = X, numclust = numclust,
niter = 300, mean_lambda = 0.01, #prob_lambda = 0.001,
nrep = 1)
rm("flowmix")
remove.packages(flowmix)
remove.packages("flowmix")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_1.0.tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(fig.width=14, fig.height=5, echo=TRUE, warning=FALSE,
message=FALSE, eval=TRUE)##, cache=TRUE)
library(tidyverse)
library(flowmix)
library(devtools)
#load_all('flowmix')
#outputdir = "."
set.seed(0)
datobj = generate_data_generic(p=5, TT=300, fac=.5, nt=2000, dimdat = 3)
ylist = datobj$ylist
X = datobj$X
plot(ylist[[1]][,1:2], ylab="", xlab="", pch=16, col=rgb(0,0,1,0.2), cex=.5)
matplot(X, type='l')
numclust = 4
set.seed(0)
res = flowmix(ylist = ylist, X = X, numclust = numclust,
niter = 300, mean_lambda = 0.01, #prob_lambda = 0.001,
nrep = 1)
library(CVXR)
?CVXR::multiply
v1 <- rnorm(10)
v2 <- rnorm(10)
M1 <- diag(rnorm(10))
CVXR::multiply(v1, M1 %*% v2)
CVXR::multiply(v1, M1 %*% M1)
numclust = 4
set.seed(0)
res = flowmix(ylist = ylist, X = X, numclust = numclust,
niter = 300, mean_lambda = 0.01, prob_lambda = 0.001,
nrep = 1)
args(flowmix)
View(flowmix)
View(flowmix_lambda)
View(flowmix_once)
numclust = 4
set.seed(0)
res = flowmix(ylist = ylist, X = X, numclust = numclust,
niter = 300, mean_lambda = 0.01, pie_lambda = 0.001,
nrep = 1)
print(res)
str(res)
plot_prob(res)
?flowmix::plot_iter
plot_prob <- function(res, iclusts=NULL, main=NULL,
cols = NULL
){
## Setup
if(is.null(iclusts)) iclusts = c(1:res$numclust)
if(is.null(cols)){ cols = RColorBrewer::brewer.pal(res$numclust, "Set3") }
## Reorder clusters in decreasing order of diam
res <- reorder_clust(res)
## Make plot
matplot(NA,
xlim = c(0, res$TT),
ylab = "",
xlab = "",
ylim = c(0, 1),
axes = FALSE)
abline(h = seq(from = 0, to = 1, by = 0.1), col='grey90', lwd=2, lty=3)
matlines(res$prob[,iclusts], type = 'l', lty = 1, lwd = 3, col = cols[iclusts])
## Add a main title
if(is.null(main)){
title(main = "Cluster probabilities", cex.main=2)
} else {
title(main = main, cex.main=1)
}
## Add date ticks
if(!is.null(rownames(res$X)) & lubridate::is.Date(rownames(res$X)[1])){
add_date_ticks(res)
} else {
axis(2);axis(1);
}
}
plot_prob(res)
remove.packages(flowmix)
remove.packages("flowmix")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("inline")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, type = "source")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
sys.which("make")
Sys.which("make")
install.packages("jsonlite", type = "source")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
install.packages("fansi")
install.packages("fansi")
install.packages("fansi")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
install.packages(c("backports", "BH", "caTools", "coin", "colorspace", "cpp11", "crosstalk", "DBI", "diffobj", "dplyr", "ECOSolveR", "fansi", "git2r", "hms", "htmltools", "libcoin", "lubridate", "pROC", "Rcpp", "rgdal", "sp", "SQUAREM", "stringi", "tibble", "withr", "xfun"))
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
Sys.which("make")
install.packages("jsonlite", type = "source")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
install.packages(c("dplyr", "tibble"))
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("jsonlite", type = "source")
install.packages("Rcpp", type= "source")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("grf", type = "source")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
install.packages("grf", type = "source")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
?install.packages
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL)
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, quiet = T)
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, quiet = T, type = "source")
Sys.which("make")
## "C:\\rtools40\\usr\\bin\\make.exe"
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, quiet = T, type = "source", INSTALL_opts = "--force-biarch")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, quiet = T, type = "source", INSTALL_opts = "--merge-multiarch")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, type = "source", INSTALL_opts = "--merge-multiarch")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_1.0.tar.gz", repos = NULL, type = "source")
#install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_1.0.tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(fig.width=14, fig.height=5, echo=TRUE, warning=FALSE,
message=FALSE, eval=TRUE)##, cache=TRUE)
library(tidyverse)
library(flowmix)
library(devtools)
#load_all('flowmix')
#outputdir = "."
set.seed(0)
datobj = generate_data_generic(p=5, TT=300, fac=.5, nt=2000, dimdat = 3)
ylist = datobj$ylist
X = datobj$X
X
plot(ylist[[1]][,1:2], ylab="", xlab="", pch=16, col=rgb(0,0,1,0.2), cex=.5)
matplot(X, type='l')
numclust = 4
set.seed(0)
res = flowmix(ylist = ylist, X = X, numclust = numclust,
niter = 300, mean_lambda = 0.01, pie_lambda = 0.001,
nrep = 1)
print(res)
numclust = 4
set.seed(0)
res = flowmix(ylist = ylist, X = X, numclust = numclust,
niter = 300, mean_lambda = 0.01, pie_lambda = 0.001,
nrep = 1)
print(res$alpha, res$beta)
print(c(res$alpha, res$beta))
print(list(res$alpha, res$beta))
print(list(alpha = res$alpha, beta = res$beta))
plot_prob(res)
par(mfrow = c(1,3), cex=1.2)
for(idim in 1:3){
matplot(res$mn[,idim,], type='l', lty=1, ylab = paste0("Mean, dim=", idim))
}
par(mfrow = c(1,3))
ylim = c(-3,8)
xlim = c(-5,8)
for(dims in list(c(1,2), c(2,3), c(3,1))){
scatterplot_2d(ylist, res, 100, dims = dims, cex_fac=1, ylim=ylim, xlim=xlim)
}
par(mfrow = c(1,3))
for(tt in c(1,50,200)){
scatterplot_2d(ylist, res, tt,   dims = c(1,2), cex_fac=1, ylim=ylim, xlim=xlim)
}
## Define the locations to save the CV.
destin = "."
## Define the CV folds (e.g. 5 big consecutive time blocks)
folds = blockcv_make_folds(ylist = ylist, nfold = 5)
## Define the candidate lambda values (logarithmically spaced)
cv_gridsize = 5
prob_lambdas =  logspace(min = 0.0001, max = 1, length = cv_gridsize)
mean_lambdas = logspace(min = 0.0001, max = 1, length = cv_gridsize)
## Example of one CV job for one pair of regularization parameters (and CV folds
## and EM replicates)
ialpha = 1
ibeta = 1
ifold = 1
irep = 1
isim = 2
one_job(ialpha = ialpha,
ibeta = ibeta,
ifold = ifold,
irep = irep,
folds = folds,
destin = destin,
isim = isim,
sim = 2,
mean_lambda = mean_lambdas, prob_lambdas = prob_lambdas,
## The rest that is needed explicitly for flowmix()
ylist = ylist,
countslist = NULL,
X = X,
numclust = 4,
maxdev = 0.5)
## Define the locations to save the CV.
destin = "."
## Define the CV folds (e.g. 5 big consecutive time blocks)
folds = blockcv_make_folds(ylist = ylist, nfold = 5)
## Define the candidate lambda values (logarithmically spaced)
cv_gridsize = 5
prob_lambdas =  logspace(min = 0.0001, max = 1, length = cv_gridsize)
mean_lambdas = logspace(min = 0.0001, max = 1, length = cv_gridsize)
## Example of one CV job for one pair of regularization parameters (and CV folds
## and EM replicates)
ialpha = 1
ibeta = 1
ifold = 1
irep = 1
isim = 2
one_job(ialpha = ialpha,
ibeta = ibeta,
ifold = ifold,
irep = irep,
folds = folds,
destin = destin,
isim = isim,
sim = 2,
mean_lambda = mean_lambdas, pie_lambdas = prob_lambdas,
## The rest that is needed explicitly for flowmix()
ylist = ylist,
countslist = NULL,
X = X,
numclust = 4,
maxdev = 0.5)
## Define the locations to save the CV.
destin = "."
## Define the CV folds (e.g. 5 big consecutive time blocks)
folds = blockcv_make_folds(ylist = ylist, nfold = 5)
## Define the candidate lambda values (logarithmically spaced)
cv_gridsize = 5
prob_lambdas =  logspace(min = 0.0001, max = 1, length = cv_gridsize)
mean_lambdas = logspace(min = 0.0001, max = 1, length = cv_gridsize)
## Example of one CV job for one pair of regularization parameters (and CV folds
## and EM replicates)
ialpha = 1
ibeta = 1
ifold = 1
irep = 1
isim = 2
one_job(ialpha = ialpha,
ibeta = ibeta,
ifold = ifold,
irep = irep,
folds = folds,
destin = destin,
isim = isim,
sim = 2,
mean_lambda = mean_lambdas, pie_lambdas = prob_lambdas,
## The rest that is needed explicitly for flowmix()
ylist = ylist,
countslist = NULL,
X = X,
numclust = 4,
maxdev = 0.5)
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, type = "source")
quit()
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(RcppArmadillo)
library(RcppEigen)
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.gz", repos = NULL, type = "source")
Rcpp::evalCpp("2+2")
devtools::install_github("grf-labs/grf", subdir = "r-package/grf")
devtools::install_github("grf-labs/grf", subdir = "r-package/grf")
Sys.which("make")
install.packages("jsonlite", type = "source")
rm("Rcpp")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar/flowmix_TCmod_0.0.0.9000.tar", repos = NULL)
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar/flowmix_TCmod_0.0.0.9000.tar")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar/flowmix_0.0.0.9000.tar", repos = NULL)
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar/flowmix_0.0.0.9000.tar")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.tar.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000/flowmix_0.0.0.9000.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000/flowmix_0.0.0.9000/flowmix.zip", repos = NULL, type = "win.binary")
library(flowmix)
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000/flowmix_0.0.0.9000/flowmix.tar.gz", repos = NULL, type = "source")
install.packages("rstantools")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000/flowmix_0.0.0.9000/flowmix.tar.gz", repos = NULL, type = "source")
library(flowmix)
#install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_1.0.tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(fig.width=14, fig.height=5, echo=TRUE, warning=FALSE,
message=FALSE, eval=TRUE)##, cache=TRUE)
library(tidyverse)
library(flowmix)
library(devtools)
#load_all('flowmix')
#outputdir = "."
load_all('flowmix')
set.seed(0)
datobj = generate_data_generic(p=5, TT=300, fac=.5, nt=2000, dimdat = 3)
ylist = datobj$ylist
X = datobj$X
plot(ylist[[1]][,1:2], ylab="", xlab="", pch=16, col=rgb(0,0,1,0.2), cex=.5)
numclust = 4
set.seed(0)
res = flowmix(ylist = ylist, X = X, numclust = numclust,
niter = 300, mean_lambda = 0.01, pie_lambda = 0.001,
nrep = 1)
numclust = 4
set.seed(0)
res = flowmix(ylist = ylist, X = X, numclust = numclust,
niter = 300, mean_lambda = 0.01, prob_lambda = 0.001,
nrep = 1)
print(list(alpha = res$alpha, beta = res$beta))
par(mfrow = c(1,3), cex=1.2)
for(idim in 1:3){
matplot(res$mn[,idim,], type='l', lty=1, ylab = paste0("Mean, dim=", idim))
}
par(mfrow = c(1,3))
ylim = c(-3,8)
xlim = c(-5,8)
for(dims in list(c(1,2), c(2,3), c(3,1))){
scatterplot_2d(ylist, res, 100, dims = dims, cex_fac=1, ylim=ylim, xlim=xlim)
}
install.packages("ellipse")
par(mfrow = c(1,3))
ylim = c(-3,8)
xlim = c(-5,8)
for(dims in list(c(1,2), c(2,3), c(3,1))){
scatterplot_2d(ylist, res, 100, dims = dims, cex_fac=1, ylim=ylim, xlim=xlim)
}
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
library(devtools)
install_github("robohyun66/flowmix", subdir = "flowmix")
install.packages("~/GitHub/flowmix/flowmix.tar.gz", repos = NULL, type = "source")
rm(flowmix)
rm("flmowmix")
rm("flowmix")
install.packages("~/GitHub/flowmix/flowmix.tar.gz", repos = NULL, type = "source")
install.packages("~/GitHub/flowmix/flowmix.tar.gz", repos = NULL, type = "source")
install.packages("~/GitHub/flowmix/flowmix.tar.gz", repos = NULL, type = "source")
install.packages("~/GitHub/flowmix/flowmix.tar.gz", repos = NULL, type = "source")
library(devtools)
install.packages("~/GitHub/flowmix/flowmix.tar.gz", repos = NULL, type = "source")
install_github("robohyun66/flowmix", subdir = "flowmix")
install.packages("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flowmix_0.0.0.9000/flowmix_0.0.0.9000/flowmix.tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(fig.width=14, fig.height=5, echo=TRUE, warning=FALSE,
message=FALSE, eval=TRUE)##, cache=TRUE)
library(tidyverse)
library(flowmix)
outputdir = "."
set.seed(0)
datobj = generate_data_generic(p=5, TT=300, fac=.5, nt=2000, dimdat = 3)
ylist = datobj$ylist
X = datobj$X
plot(ylist[[1]][,1:2], ylab="", xlab="", pch=16, col=rgb(0,0,1,0.2), cex=.5)
matplot(X, type = 'l')
numclust = 4
set.seed(0)
res = flowmix(ylist = ylist, X = X, numclust = numclust,
niter = 300, mean_lambda = 0.01, prob_lambda = 0.001,
nrep = 1)
print(res)
plot_prob(res)
par(mfrow = c(1,3), cex = 1.2)
for(idim in 1:3){
res$mn[,idim,] %>% matplot(type = 'l',
lty = 1, ylab = paste0("Mean, dim=", idim))
}
par(mfrow = c(1,3))
ylim = c(-3,8)
xlim = c(-5,8)
for(dims in list(c(1,2), c(2,3), c(3,1))){
scatterplot_2d(ylist, res, 100, dims = dims, cex_fac=1, ylim=ylim, xlim=xlim)
}
par(mfrow = c(1,3))
for(tt in c(1,50,200)){
scatterplot_2d(ylist, res, tt,
dims = c(1,2),
cex_fac = 1,
ylim = ylim,
xlim = xlim)
title(main = paste0("t=", tt, " out of ", res$TT))
}
par(mfrow = c(1,3), oma = c(2,2,2,2))
ylim = c(-3,8)
xlim = c(-5,8)
for(tt in 1:res$TT){
for(dims in list(c(1,2), c(2,3), c(3,1))){
scatterplot_2d(ylist, res, 100, dims = dims, cex_fac=1, ylim=ylim, xlim=xlim)
}
mtext(outer = TRUE,
text = paste0("t=", tt, " out of ", res$TT),
cex = 2)
}
## Load data
load(file = "~/repos/flowmix/demo-MGL1704.Rdata")
## Load data
load(file = "C:/Users/drain/Documents/GitHub/flowmix/demo-MGL1704.Rdata")
X = X %>% select(-time, -lat, -lon) %>% as.matrix()
ylist = ybin_list
countslist = biomass_list
## Estimate model
la('flowmix')
?la
## Load data
load(file = "C:/Users/drain/Documents/GitHub/flowmix/demo-MGL1704.Rdata")
X = X %>% select(-time, -lat, -lon) %>% as.matrix()
ylist = ybin_list
countslist = biomass_list
## Estimate model
#la('flowmix')
set.seed(1)
res = flowmix(ylist, X, numclust = 10,
countslist = countslist,
mean_lambda = 0.001,
prob_lambda = 0.01,
maxdev = 0.5,
nrep = 1,
verbose = TRUE)
help(cv.flowmix)
cvres = cv.flowmix(ylist = ylist,
countslist = NULL,
X = X,
maxdev = 0.5,
numclust = 4,
prob_lambdas = prob_lambdas,
mean_lambdas = mean_lambdas,
## nrep = 5,
## nfold = 5,
nrep = 1,
nfold = 2,
## verbose = TRUE,
destin = 'C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flow_CV_out/',
mc.cores = 8)
## Default print
print(res)
## Plot estimated probabilities
plot_prob(res)
## Three scatterplots of one time point
par(mfrow = c(1,3))
ylim = c(-3,8)
xlim = c(-5,8)
dimnames = c("diam", "red", "orange")
for(dims in list(c(1,2), c(2,3), c(3,1))){
scatterplot_2d(ylist = ylist,
countslist = countslist,
obj = res,
300,
dims = dims, cex_fac=8,
pt_col = rgb(0 ,0, 1, 0.1),
xlab = dimnames[dims[1]],
ylab = dimnames[dims[2]])
}
destin = "."
maxres = get_max_lambda(destin, "maxres.Rdata",
ylist = ylist,
countslist = countslist,
X = X %>% as.matrix(),
numclust = 10,
maxdev = 0.5,
max_prob_lambda = 1,
max_mean_lambda = 3)
?load
## Load data
load(file = "C:/Users/drain/Documents/GitHub/flowmix/demo-MGL1704.Rdata", verbose = T)
plot(res)
matplot(X)
head(X)
X = X %>% select(-time, -lat, -lon) %>% as.matrix()
matplot(X< type = 'l')
matplot(X, type = 'l')
names(X)
X
setwd("~/GitHub/flowmix/flowmix/R")
Rs <- dir("~/GitHub/flowmix/flowmix/R")
Rs
sapply(Rs, source)
rm(Rs)
save.image("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flow_funcs.RData")
save.image("C:/Users/drain/Box Sync/USC_Stuff/Featureless_Flowmix/flow_funcs.RData")
